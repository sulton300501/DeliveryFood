# Generated by Django 5.1.7 on 2025-03-22 11:59

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import sorl.thumbnail.fields
from django.db import migrations, models

import apps.common.models.fields
import apps.common.utils


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("common", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="Kiritilgan sana")),
                ("update_at", models.DateTimeField(auto_now=True, verbose_name="O'zgartrilgan sana")),
                ("active", apps.common.models.fields.ActiveField(default=False, verbose_name="active")),
                ("full_name", models.CharField(blank=True, max_length=255, null=True, verbose_name="Toliq ism")),
                ("full_name_uz", models.CharField(blank=True, max_length=255, null=True, verbose_name="Toliq ism")),
                ("full_name_ru", models.CharField(blank=True, max_length=255, null=True, verbose_name="Toliq ism")),
                (
                    "phone_number",
                    apps.common.models.fields.PhoneField(
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="15 tadan son kam bolishi kerak...  Standart raqam talab qilinadi",
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="Foydalanuvchi raqami",
                    ),
                ),
                ("email", models.EmailField(max_length=40, verbose_name="Email pochta")),
                (
                    "avatar",
                    sorl.thumbnail.fields.ImageField(
                        upload_to=apps.common.utils.generate_upload_path, verbose_name="Rasm"
                    ),
                ),
                ("birthdate", models.DateTimeField(blank=True, null=True, verbose_name="Tugilgan sana")),
                (
                    "gender",
                    models.CharField(
                        choices=[("Male", "Erkak"), ("Female", "Ayol")], max_length=255, verbose_name="Jinsi"
                    ),
                ),
                ("is_superuser", models.BooleanField(default=False)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "address_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="common.address",
                        verbose_name="Yashash manzili",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Foydalanuvchilar",
                "verbose_name_plural": "Foydalanuvchilar",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
